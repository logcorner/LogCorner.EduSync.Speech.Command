name: Container Workflow
on:
  push:
  workflow_dispatch:

env:
  ACR_LOGON_SERVER: ${{ secrets.ACR_NAME }}.azurecr.io
  IMAGE_NAME: ${{ secrets.ACR_NAME }}.azurecr.io/logcorner-edusync-speech-command:${{ github.run_number }}

jobs:

  setup-iac:
    env:
      ARM_CLIENT_ID: ${{ secrets.SERVICE_PRINCIPAL_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    defaults:
      run:
        working-directory: ./iac
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest

    steps:
    # checkout the repo
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@master
    
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.1.4
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate 

    - name: Terraform Plan
      id: plan
      run: terraform plan -var-file="dev.tfvars" -input=false -lock=false
      continue-on-error: true
    - run: echo ${{ steps.plan.outputs.stdout }}
    - run: echo ${{ steps.plan.outputs.stderr }}
    - run: echo ${{ steps.plan.outputs.exitcode }}
    
  build-deploy-image:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: setup-iac
    steps:
    # checkout the repo
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@master
    
    - name: 'Build and push image'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_LOGON_SERVER }}
        username: ${{ secrets.SERVICE_PRINCIPAL_ID }}
        password: ${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}

    - run: docker-compose -f ./src/docker-compose.yml build 
    - run: docker tag logcornerhub/logcorner-edusync-speech-command ${{ env.IMAGE_NAME }}
    - run: docker push ${{ env.IMAGE_NAME }}
    
  deploy-to-aks:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
   
    needs: build-deploy-image
    
    steps:
    
    - uses: actions/checkout@master
    
    # Logs in with your Azure credentials
    - name: Azure login
      uses: azure/login@v1.4.6
      with:
        client-id: ${{ secrets.SERVICE_PRINCIPAL_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
        # Set the target Azure Kubernetes Service (AKS) cluster. 
    - name: Set AKS context
      id: set-context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ secrets.RESOURCE_GROUP_NAME }}
        cluster-name: ${{ secrets.AKS_NAME }}
    
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
          version: 'latest' # default is latest (stable)
          token: ${{ secrets.GITHUB_TOKEN }} # only needed if version is 'latest'
      id: install
  
    - name: Deploy to AKS using Helm
      run: |
        helm upgrade --install logcorner-command ./kubernetes/aks/helm-chart/webapi\
          --set image.repository=${{ secrets.ACR_LOGON_SERVER }} \
          --set image.name=logcorner-edusync-speech-command \
          --set image.tag=${{ github.run_number }} \
          --set replicaCount=1 \
          --set service.type=LoadBalancer \
          --set service.port=80
          
      env:
        IMAGE_TAG: ${{ github.run_number }}