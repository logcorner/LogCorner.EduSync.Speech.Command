# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
- name: sonarqubeKey
  value: 'LogCorner.EduSync.Speech.Command'
- name: sonarqubeName
  value: 'LogCorner.EduSync.Speech.Command'
steps:
- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'sonarqueConnection'
    scannerMode: 'MSBuild'
    projectKey: 'LogCorner.EduSync.Speech.Command'
    projectName: 'LogCorner.EduSync.Speech.Command'
    extraProperties: |
      # Additional properties that will be passed to the scanner, 
      # Put one key=value per line, example:
      # sonar.exclusions=**/*.bin
      sonar.dependencyCheck.reportPath=$(Build.SourcesDirectory)/dependency-check-report.xml     
             sonar.dependencyCheck.htmlReportPath=$(Build.SourcesDirectory)/dependency-check-report.html
                sonar.cpd.exclusions=**/AssemblyInfo.cs,**/*.g.cs
                   sonar.cs.vscoveragexml.reportsPaths=$(System.DefaultWorkingDirectory)/**/*.coveragexml
               sonar.cs.vstest.reportsPaths=$(System.DefaultWorkingDirectory)/**/*.trx
- task: DotNetCoreCLI@2
  displayName: 'dotnet restore'
  inputs:
    command: restore
    projects: '**/*.csproj'
- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: test
    projects: '**/*Unit[Tt]ests/*.csproj'

- task: SonarQubeAnalyze@4

- task: SonarSource.sonarqube.291ed61f-1ee4-45d3-b1b0-bf822d9095ef.SonarQubePublish@4
  displayName: 'Publish Quality Gate Result'
