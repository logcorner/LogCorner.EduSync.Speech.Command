# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

resources:
  repositories:
  - repository: MyGitHubRepo
    type: github
    endpoint: github.com_logcorner
    name: logcorner/LogCorner.EduSync.Speech.Command
    ref: azure-pipelines
 
trigger:
- azure-pipelines

pool: LOGCORNER-POOL

steps:
- checkout: self
- checkout: MyGitHubRepo


- task: DockerCompose@0
  displayName: 'Build docker images '
  inputs:
    containerregistrytype: 'Azure Container Registry'
    dockerComposeFile: 'LogCorner.EduSync.Speech.Command/src/docker-compose.yml'
    additionalDockerComposeFiles: |
      docker-compose.override.yml
      docker-compose-unit-tests.yml
      docker-compose.override-unit-tests.yml
    action: 'Build services'
    includeLatestTag: true
- task: DockerCompose@0
  displayName: 'Run unit tests'
  inputs:
    containerregistrytype: 'Azure Container Registry'
    dockerComposeFile: 'LogCorner.EduSync.Speech.Command/src/docker-compose-unit-tests.yml'
    additionalDockerComposeFiles: 'docker-compose.override-unit-tests.yml'
    action: 'Run services'
- bash: echo $(System.DefaultWorkingDirectory)
- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: 'LogCorner.EduSync.Speech.Command/src/TestResults/tests-results-domain/tests-results-domain.xml'
    failTaskOnFailedTests: true
  continueOnError: true

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: 'Get-Childitem -File -Recurse'
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: 'LogCorner.EduSync.Speech.Command/deploy/'
    ArtifactName: 'drop-arm'
    publishLocation: 'Container'