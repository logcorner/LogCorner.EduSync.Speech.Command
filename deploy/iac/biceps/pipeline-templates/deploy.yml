parameters:
- name: environmentType
  type: string

stages:

- ${{ if ne(parameters.environmentType, 'Production') }}:
  - stage: Validate_${{parameters.environmentType}}
    displayName: Validate (${{parameters.environmentType}} Environment)
    jobs:
    - job: ValidateBicepCode
      displayName: Validate Bicep code
      variables:
      - group: ToyWebsite${{parameters.environmentType}}
      steps:
        - task: AzureCLI@2
          name: RunPreflightValidation
          displayName: Run preflight validation
          inputs:
            azureSubscription: AzureDevOpsServiceConnection
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az deployment group validate \
                --resource-group $(ResourceGroupName) \
                --template-file deploy/iac/biceps/main.bicep \
                --parameters environmentType=$(EnvironmentType) 

- ${{ if eq(parameters.environmentType, 'Production') }}:
  - stage: Preview_${{parameters.environmentType}}
    displayName: Preview (${{parameters.environmentType}} Environment)
    jobs:
    - job: PreviewAzureChanges
      displayName: Preview Azure changes
      variables:
      - group: ToyWebsite${{parameters.environmentType}}
      steps:
        - task: AzureCLI@2
          name: RunWhatIf
          displayName: Run what-if
          inputs:
            azureSubscription: AzureDevOpsServiceConnection
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az deployment group what-if \
                --resource-group $(ResourceGroupName) \
                --template-file deploy/iac/biceps/main.bicep \
                --parameters environmentType=$(EnvironmentType) 

- stage: Deploy_${{parameters.environmentType}}
  displayName: Deploy (${{parameters.environmentType}} Environment)
  jobs:
  - deployment: DeployCluster
    displayName: Deploy AKS Cluster and Container Registry
    pool:
      vmImage: windows-latest
    variables:
    - group: ToyWebsite${{parameters.environmentType}}
    environment: ${{parameters.environmentType}}
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self

            - task: AzureCLI@2
              name: DeployBicepFile
              displayName: Deploy Bicep file
              inputs:
                azureSubscription: AzureDevOpsServiceConnection
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  set -e
                  deploymentOutput=$(az deployment group create \
                    --name $(Build.BuildNumber) \
                    --resource-group $(ResourceGroupName) \
                    --template-file deploy/iac/biceps/main.bicep \
                    --parameters environmentType=$(EnvironmentType) )
                  clusterName=$(echo $deploymentOutput | jq -r '.properties.outputs.clusterName.value')
                  echo "##vso[task.setvariable variable=clusterName]$clusterName"
                  loginServer=$(echo $deploymentOutput | jq -r '.properties.outputs.loginServer.value')
                  echo "##vso[task.setvariable variable=ACR_NAME]$loginServer"
            - task: replacetokens@3
              displayName: Replace Tokens in  CommandDatabase
              inputs:
                rootDirectory: 'deploy/kubernetes/aks/CommandDatabase'
                targetFiles: '*.yml'
                encoding: 'auto'
                writeBOM: true
                actionOnMissing: 'warn'
                keepToken: false
                actionOnNoFiles: 'continue'
                enableTransforms: false
                tokenPrefix: '__'
                tokenSuffix: '__'
                useLegacyPattern: false
                enableTelemetry: true
            - script: cat deploy/kubernetes/aks/CommandDatabase/db-job.yml    
            
            - task: Kubernetes@1
              displayName: Kubernetes Deploy CommandDatabase
              inputs:
                connectionType: 'Azure Resource Manager'
                azureSubscriptionEndpoint: 'AzureDevOpsServiceConnection'
                azureResourceGroup: '$(ResourceGroupName)'
                kubernetesCluster: '$(clusterName)'
                namespace: 'default'
                command: 'apply'
                useConfigurationFile: true
                configuration: 'deploy/kubernetes/aks'
                secretType: 'dockerRegistry'
                containerRegistryType: 'Azure Container Registry'
            - task: Kubernetes@1
              displayName: Kubernetes Deploy CommandDatabase
              inputs:
                connectionType: 'Azure Resource Manager'
                azureSubscriptionEndpoint: 'AzureDevOpsServiceConnection'
                azureResourceGroup: '$(ResourceGroupName)'
                kubernetesCluster: '$(clusterName)'
                namespace: 'default'
                command: 'apply'
                useConfigurationFile: true
                configuration: 'deploy/kubernetes/aks/CommandDatabase'
                arguments: '--namespace=aks'
                secretType: 'dockerRegistry'
                containerRegistryType: 'Azure Container Registry'