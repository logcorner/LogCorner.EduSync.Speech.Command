trigger:
  branches:
    include:
    - azure-pipelines-aks-terraform
resources:
  repositories:
  - repository: MyGitHubRepo
    type: github
    endpoint: github.com_logcorner
    name: logcorner/LogCorner.EduSync.Speech.Command
    ref: azure-pipelines-aks-terraform
variables:
- name: dockerRegistryServiceConnection
  value: 'AzureDevOpsServiceConnection'
- name: imageRepository
  value: 'logcornerlogcorneredusyncspeechcommand'
- name: containerRegistry
  value: 'tfqdemotfquickstartacr.azurecr.io'
- name: dockerfilePath
  value: 'LogCorner.EduSync.Speech.Command/src/LogCorner.EduSync.Speech/LogCorner.EduSync.Speech.Presentation/Dockerfile'
- name: tag
  value: '$(Build.BuildId)'
- name: ACR_NAME
  value:  tfqdemotfquickstartacr.azurecr.io
- name: imagePullSecret
  value: 'acrlogcornerregistry1339485b-auth'
stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      name:  LOGCORNER-POOL
    steps:
    
    - task: TerraformInstaller@0
      displayName: Install Terraform 1.1.3
      inputs:
        terraformVersion: '1.1.4'
    - script: |
        terraform init
      name: LintBicepCode
      displayName: Init Terraform
      workingDirectory: '$(System.DefaultWorkingDirectory)/deploy/iac/terraform'
    - task: TerraformTaskV2@2
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/deploy/iac/terraform'
    - task: TerraformTaskV2@2
      displayName: Plan Terraform
      inputs:
        provider: 'azurerm'
        command: 'plan'
        environmentServiceNameAzureRM: 'AzureDevOpsServiceConnection'
    - task: TerraformTaskV2@2
      displayName: Apply Terraform
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/deploy/iac/terraform'
        commandOptions: '-input=false -auto-approve'
        environmentServiceNameAzureRM: 'AzureDevOpsServiceConnection'
    - task: DockerCompose@0
      displayName: 'Build docker images '
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureContainerRegistry: '$(dockerRegistryServiceConnection)'
        dockerComposeFile: 'src/docker-compose.yml'
        dockerComposeFileArgs: 'DOCKER_REGISTRY=$(containerRegistry)'
        action: 'Build services'
        additionalImageTags: '$(tag)'
        includeLatestTag: true
    - task: AzureCLI@2
      displayName: Docker Push
      inputs:
        azureSubscription: 'AzureDevOpsServiceConnection'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az acr login -n tfqdemotfquickstartacr.azurecr.io
          docker push tfqdemotfquickstartacr.azurecr.io/logcorner-edusync-speech-command:$(tag)
          docker push tfqdemotfquickstartacr.azurecr.io/logcorner-edusync-speech-mssql-tools:$(tag)
   
      
    
    - task: replacetokens@3
      displayName: Replace Tokens in  CommandApi
      inputs:
        rootDirectory: 'deploy/kubernetes/aks'
        targetFiles: '**\*.yml'
        encoding: 'auto'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        actionOnNoFiles: 'continue'
        enableTransforms: false
        tokenPrefix: '__'
        tokenSuffix: '__'
        useLegacyPattern: false
        enableTelemetry: true

    
    - task: Kubernetes@1
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: 'AzureDevOpsServiceConnection'
        azureResourceGroup: 'demo-tfquickstart-dev-rg'
        kubernetesCluster: 'demo-tfquickstart-aks'
        command: 'apply'
        arguments: '-f . -f CommandDatabase -f CommandApi'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
        workingDirectory: '$(System.DefaultWorkingDirectory)/deploy/kubernetes/aks'

     