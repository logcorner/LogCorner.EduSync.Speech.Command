
trigger:
  branches:
    include:
    - azure-pipelines-aks-terraform
resources:
  repositories:
  - repository: MyGitHubRepo
    type: github
    endpoint: github.com_logcorner
    name: logcorner/LogCorner.EduSync.Speech.Command
    ref: azure-pipelines-aks-terraform
variables:
- name: dockerRegistryServiceConnection
  value: 'AzureDevOpsServiceConnection'
- name: imageRepository
  value: 'logcornerlogcorneredusyncspeechcommand'


- name: BUILD_NUMBER
  value: '$(Build.BuildId)'

- name: imagePullSecret
  value: 'acrlogcornerregistry1339485b-auth'
stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      name:  LOGCORNER-POOL
    steps:
    
    - task: TerraformInstaller@0
      displayName: Install Terraform 1.1.3
      inputs:
        terraformVersion: '1.1.4'
    
    - task: TerraformTaskV2@2
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/deploy/iac/terraform'
        backendServiceArm: 'AzureDevOpsServiceConnection'
        backendAzureRmResourceGroupName: 'terraform-rg'
        backendAzureRmStorageAccountName: 'tfbackenglogconer'
        backendAzureRmContainerName: 'tfbackend'
        backendAzureRmKey: 'terraform.tfstate'
    - task: TerraformTaskV2@2
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/deploy/iac/terraform'
    - task: TerraformTaskV2@2
      displayName: Plan Terraform
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/deploy/iac/terraform'
        commandOptions: '-out tfplan'
        environmentServiceNameAzureRM: 'AzureDevOpsServiceConnection'
    - task: PowerShell@2
      inputs:
         targetType: 'inline'
         script: 'terraform show -json tfplan >> tfplan.json'
         workingDirectory: '$(System.DefaultWorkingDirectory)/deploy/iac/terraform'
    
    - task: TerraformTaskV2@2
      name: terraformApply
      displayName: Apply Terraform
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/deploy/iac/terraform'
        commandOptions: 'tfplan'
        environmentServiceNameAzureRM: 'AzureDevOpsServiceConnection'
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $terraformOutput =  "$(terraformApply.jsonOutputVariablesPath)" 
          $output = Get-Content $($terraformOutput ) | ConvertFrom-Json
         
          $resource_group_name =  $output.resource_group_name.value
          $container_registry_name =  $output.container_registry_name.value
          $kubernetes_cluster_name =  $output.kubernetes_cluster_name.value

          Write-Host "resource_group_name ="   $resource_group_name
          Write-Host "kubernetes_cluster_name ="   $container_registry_name
          Write-Host  "kubernetes_cluster_name  =" $kubernetes_cluster_name
          Write-Host "##vso[task.setvariable variable=resourceGroupName]$resource_group_name"
          Write-Host "##vso[task.setvariable variable=clusterName]$kubernetes_cluster_name"
          Write-Host "##vso[task.setvariable variable=acrName]$container_registry_name"
        workingDirectory: '$(System.DefaultWorkingDirectory)/deploy/iac/terraform'

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          
          Write-Host "$(clusterName)"= $(clusterName)
          Write-Host "$(acrName)"= $(acrName)
      name: terraformOutput
      displayName: Read build variables
    - task: DockerCompose@0
      displayName: 'Build docker images '
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureContainerRegistry: '$(dockerRegistryServiceConnection)'
        dockerComposeFile: 'src/docker-compose.yml'
        dockerComposeFileArgs: 'DOCKER_REGISTRY=$(acrName).azurecr.io'
        action: 'Build services'
        additionalImageTags: '$(BUILD_NUMBER)'
        includeLatestTag: true
    - task: AzureCLI@2
      displayName: Docker Push
      inputs:
        azureSubscription: 'AzureDevOpsServiceConnection'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az acr login -n $(acrName).azurecr.io
          docker push $(acrName).azurecr.io/logcorner-edusync-speech-command:$(BUILD_NUMBER)
          docker push $(acrName).azurecr.io/logcorner-edusync-speech-mssql-tools:$(BUILD_NUMBER)
  
    - task: replacetokens@3
      displayName: Replace Tokens in  CommandApi
      inputs:
        rootDirectory: 'deploy/kubernetes/aks'
        targetFiles: '**\*.yml'
        encoding: 'auto'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        actionOnNoFiles: 'continue'
        enableTransforms: false
        tokenPrefix: '__'
        tokenSuffix: '__'
        useLegacyPattern: false
        enableTelemetry: true

    
    - task: Kubernetes@1
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: 'AzureDevOpsServiceConnection'
        azureResourceGroup: '($resource_group_name)'
        kubernetesCluster: '$(clusterName)'
        command: 'apply'
        arguments: '-f . -f CommandDatabase -f CommandApi'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
        workingDirectory: '$(System.DefaultWorkingDirectory)/deploy/kubernetes/aks'

     