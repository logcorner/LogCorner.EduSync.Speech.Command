parameters:
- name: environmentType
  type: string
- name: dockerRegistry
  type: string
- name: databaseImageName
  type: string
- name: webApiImageName
  type: string
stages:

- ${{ if ne(parameters.environmentType, 'Production') }}:
  - stage: Validate_${{parameters.environmentType}}
    displayName: Validate (${{parameters.environmentType}} Environment)
    jobs:
    - job: ValidateBicepCode
      displayName: Validate Bicep code
      variables:
      - group: ToyWebsite${{parameters.environmentType}}
      steps:
        # - task: AzureCLI@2
        #   name: RunPreflightValidation
        #   displayName: Run preflight validation
        #   inputs:
        #     azureSubscription: AzureDevOpsServiceConnection
        #     scriptType: 'ps'
        #     scriptLocation: 'inlineScript'
        #     inlineScript: |
        #       az deployment group validate `
        #         --resource-group $(ResourceGroupName) `
        #         --template-file deploy/iac/biceps/main.bicep `
        #         --parameters environmentType=$(EnvironmentType) 
        - task: TerraformInstaller@0
          displayName: Install TF 1.1.3
          inputs:
            terraformVersion: '1.1.4'
        
        - script: |
            terraform init
          name: LintBicepCode
          displayName: Run Bicep linter
          workingDirectory: '$(System.DefaultWorkingDirectory)/deploy/iac/terraform'
        
        - task: TerraformTaskV2@2
          displayName: $ terraform plan
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)/deploy/iac/terraform'
            commandOptions: '-out tfplan'
            environmentServiceNameAzureRM: 'AzureDevOpsServiceConnection'
    
        - script: |
              cd $(System.DefaultWorkingDirectory)/deploy/iac/terraform
              
              terraform show tfplan 
          
              
          displayName: Create tfplan.json

# - ${{ if eq(parameters.environmentType, 'Production') }}:
#   - stage: Preview_${{parameters.environmentType}}
#     displayName: Preview (${{parameters.environmentType}} Environment)
#     jobs:
#     - job: PreviewAzureChanges
#       displayName: Preview Azure changes
#       variables:
#       - group: ToyWebsite${{parameters.environmentType}}
#       steps:
#         - task: AzureCLI@2
#           name: RunWhatIf
#           displayName: Run what-if
#           inputs:
#             azureSubscription: AzureDevOpsServiceConnection
#             scriptType: 'ps'
#             scriptLocation: 'inlineScript'
#             inlineScript: |
#               az deployment group what-if `
#                 --resource-group $(ResourceGroupName) `
#                 --template-file deploy/iac/biceps/main.bicep `
#                 --parameters environmentType=$(EnvironmentType) 

- stage: Deploy_${{parameters.environmentType}}
  displayName: Deploy (${{parameters.environmentType}} Environment)
  jobs:
  - deployment: DeployCluster
    displayName: Deploy AKS Cluster and Container Registry
    pool:
      name: LOGCORNER-POOL
    variables:
    - group: ToyWebsite${{parameters.environmentType}}
    environment: ${{parameters.environmentType}}
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self

            - task: AzureCLI@2
              name: DeployBicepFile
              displayName: Deploy Bicep file
              inputs:
                azureSubscription: AzureDevOpsServiceConnection
                scriptType: 'ps'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  cd $(System.DefaultWorkingDirectory)/deploy/iac/terraform
              
                   terraform 'apply' 
            # - task: AzureCLI@2
            #   displayName: Docker Build & Push
            #   inputs:
            #     azureSubscription: 'AzureDevOpsServiceConnection'
            #     scriptType: 'ps'
            #     scriptLocation: 'inlineScript'
            #     inlineScript: |
            #       docker tag ${{parameters.dockerRegistry}}/${{parameters.databaseImageName}} $(ACR_LOGIN_SERVER)/${{parameters.databaseImageName}}:$(Build.BuildNumber)
            #       docker tag ${{parameters.dockerRegistry}}/${{parameters.webApiImageName}} $(ACR_LOGIN_SERVER)/${{parameters.webApiImageName}}:$(Build.BuildNumber)
            #       az acr login -n $(acrName)
            #       docker push $(ACR_LOGIN_SERVER)/${{parameters.databaseImageName}}:$(Build.BuildNumber)      
            #       docker push $(ACR_LOGIN_SERVER)/${{parameters.webApiImageName}}:$(Build.BuildNumber)
                 
            # - task: replacetokens@3
            #   displayName: Replace Tokens in k8 configuration files
            #   inputs:
            #     rootDirectory: 'deploy/kubernetes/aks'
            #     targetFiles: '**\*.yml'
            #     encoding: 'auto'
            #     writeBOM: true
            #     actionOnMissing: 'warn'
            #     keepToken: false
            #     actionOnNoFiles: 'continue'
            #     enableTransforms: false
            #     tokenPrefix: '__'
            #     tokenSuffix: '__'
            #     useLegacyPattern: false
            #     enableTelemetry: true
                       
            # - task: Kubernetes@1
            #   displayName: Kubernetes Deploy Configuration files
            #   inputs:
            #     connectionType: 'Azure Resource Manager'
            #     azureSubscriptionEndpoint: 'AzureDevOpsServiceConnection'
            #     azureResourceGroup: '$(ResourceGroupName)'
            #     kubernetesCluster: '$(clusterName)'
            #     command: 'apply'
            #     arguments: '-f . -f CommandDatabase -f CommandApi'
            #     secretType: 'dockerRegistry'
            #     containerRegistryType: 'Azure Container Registry'
            #     workingDirectory: '$(System.DefaultWorkingDirectory)/deploy/kubernetes/aks'
             