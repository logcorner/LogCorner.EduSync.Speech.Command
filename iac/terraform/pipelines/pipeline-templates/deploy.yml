parameters:
- name: deploymentName
- name: serviceConnectionName
- name: backendAzureRmResourceGroupName
- name: backendAzureRmStorageAccountName
- name: backendResourceContainerName
- name: filepath
- name: workspace
stages:
- stage: deploy_infrastructure_to_${{ parameters.workspace }}_environment_${{ parameters.deploymentName}}
  displayName: deploy  to ${{ parameters.workspace }} environment
  jobs:
  - deployment: DeployTerraform
    displayName: deploy  terraform files
    pool:
      vmImage: "ubuntu-18.04"
    # creates an environment if it doesn't exist
    environment: ${{ parameters.workspace }}
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: TerraformInstaller@0
            displayName: Install Terraform 1.1.3
            inputs:
              terraformVersion: '1.1.7'
          
          - task: TerraformTaskV2@2
            displayName: Init Terraform
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.filepath}}'
              commandOptions: '-var-file="workspaces/${{  parameters.workspace }}.tfvars"'
              backendServiceArm: 'AzureDevOpsServiceConnection'
              backendAzureRmResourceGroupName: '${{ parameters.backendAzureRmResourceGroupName }}'
              backendAzureRmStorageAccountName: '${{ parameters.backendAzureRmStorageAccountName }}'
              backendAzureRmContainerName: '${{ parameters.backendResourceContainerName }}'
              backendAzureRmKey: 'terraform.tfstate'
          - task: TerraformTaskV2@2
            displayName: Validate Terraform
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.filepath}}'
          - task: TerraformTaskV2@2
            displayName: Plan Terraform
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.filepath}}'
              commandOptions: '-var-file="workspaces/${{  parameters.workspace }}.tfvars" -out tfplan'
              environmentServiceNameAzureRM: 'AzureDevOpsServiceConnection'
          - task: PowerShell@2
            displayName: Show Terraform tfplan.json
            inputs:
              targetType: 'inline'
              script: 'terraform show -json tfplan >> tfplan.json'
              workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.filepath}}'
          
          - task: TerraformTaskV2@2
            name: terraformApply
            displayName: Apply Terraform
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.filepath}}'
              commandOptions: 'tfplan'
              environmentServiceNameAzureRM: 'AzureDevOpsServiceConnection'
     